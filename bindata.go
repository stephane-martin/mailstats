// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/stopwords-en.txt (3.621kB)
// data/stopwords-fr.txt (4.032kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataStopwordsEnTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x57\x5d\xba\xe5\xa0\xaa\x7c\x67\x22\xfd\x74\x07\x65\x22\x89\xde\x65\x24\x47\x70\xa5\x3d\xa3\x3f\x5f\x41\x76\x77\x3f\xec\xaa\x8a\x0b\xff\x10\xc1\x9d\xb6\xc6\x94\x36\x99\x06\xfc\x42\xab\x51\xda\x77\x19\x39\xf5\x9d\x5f\x59\xfb\xf9\x57\xb5\x45\x69\x1f\xa2\x4a\x69\xb7\x99\x1a\xbe\x73\xe6\x4c\xe9\x38\x78\xb7\x3f\xc2\x3b\xb9\x52\x4a\x87\xf1\x08\x7c\xd2\xc8\x4a\xe9\x4c\xb5\x07\x62\xc2\x76\x89\x93\x74\x76\x3c\x29\xb5\xc1\x29\x2f\x4a\x4d\x85\x52\xb3\x22\xf3\x2c\x94\xda\x93\x96\x52\xba\xdc\x04\x88\x6e\xbd\xcb\xf4\xc5\x76\xb1\x82\x79\xfa\xda\x04\x7d\xfb\x2a\xf2\x80\x2e\x19\xf8\x79\xf9\xf8\x7d\x59\xf1\xc5\xf5\xf5\xa4\xf5\x92\x3a\x17\x86\xdd\x7d\xa7\xc1\xdd\xb0\xb1\xfb\x1e\xf2\xbb\x5e\xc9\x18\x5f\x83\xbb\x83\x51\x1a\x55\x99\xd2\x90\xd9\x33\x25\xad\x99\x29\xe9\xc7\x47\x9d\x56\x28\x7d\x53\x6d\xe1\x5c\x9f\xe2\x39\x26\xfc\xb4\xa5\xfd\x43\x1b\xef\xe9\x62\xa7\xa9\xce\x72\xfd\x90\x06\x63\x9c\x8d\xb9\xd3\xc6\x07\x56\x1e\x54\x52\xcf\xb4\xf1\x59\x7b\x60\x0f\xb3\x57\x69\x48\x50\xa9\x6e\x18\x3f\xb7\xca\x5f\x8c\xd0\xe4\xa1\x8d\x7d\xa5\x41\xb0\xb4\x27\x66\x59\x82\x1e\x55\x1a\x6d\x62\x85\xb6\x51\xf9\x08\x6c\x8b\x7c\xb9\x3b\xbc\x6c\xa0\x5f\x40\xac\xdc\x51\x69\xe7\x61\x38\xcc\x97\xd1\x01\x1b\x8a\xed\xec\xd2\xe3\xc7\x60\x2c\xe9\x95\xf8\x6d\xb6\x1c\xd8\x8d\x72\x32\xa6\x5c\x33\xc6\xcf\xf5\x38\xd8\xfd\x9c\x85\xd5\xc1\x9b\x05\xfd\x33\x0e\x31\x4b\x34\x3c\xdd\x21\x82\x2a\xcf\x01\x03\x4e\x7b\x21\xf6\xc8\x23\xae\x67\x79\x71\x11\x57\x0f\x0f\x6e\xca\x0e\x71\xdc\xdc\x3d\xbe\xb9\x7b\x84\xb1\xde\xbc\x57\x8f\x6a\xb6\xff\x4b\x8d\xf8\xcb\x1d\x30\x1c\x56\xa0\x87\x97\x2b\x2c\xc6\x45\xc4\x94\xcb\x77\xdc\xdf\x3b\xdf\x46\x47\x3d\xac\xd0\x51\x87\x42\x7f\x99\x0e\x69\x4d\x1e\xce\xaf\x40\xaf\x50\x4a\x87\x8c\x8b\xc7\x4b\x6d\x41\xa0\xaf\x07\xd9\x21\x73\xd0\x31\xe4\xa2\x63\x0e\xdf\xc7\xcb\x1e\xdb\x67\xfa\x32\x9d\x6c\x0a\xf0\xab\x77\x62\x2e\x40\x77\x54\xa0\xb7\xc3\xa3\x27\x96\x7d\x8a\x19\x77\x2a\xe9\xbe\xb9\x2b\x95\x34\x72\x5b\x54\x92\xfb\xba\x60\x40\xc0\xfb\x81\xae\x85\x71\xcb\x7c\x73\x80\xb8\xd4\x50\xdb\x72\xaa\xdd\x49\x1d\xe7\x2d\xfe\xe9\x5f\xca\xed\xa0\x52\xaf\x97\x7d\xf9\x05\x51\x52\xe4\xd9\xb8\x1a\xd8\x7d\x5c\x66\xcf\x83\x33\xd5\x5f\xad\x51\xbd\x2e\xce\x15\x71\xf1\x47\xb5\x45\xf5\xba\x65\x98\x67\xa7\x1f\x69\x54\x7b\x66\x74\xeb\x99\x7f\x53\xed\xf0\x60\xb2\x2a\x9d\x90\x5f\x38\xe1\x17\x13\xaa\xfd\xcb\xfd\x6d\x46\xc8\x50\xf5\xbd\x56\xf3\xd9\xcc\x57\x57\x7f\x7d\x99\xfe\x7f\xaa\xd1\x87\xf9\x76\x50\xfa\xe0\x24\x3f\x5d\x1e\x87\xee\xa8\xd4\xd2\x38\xb1\xa2\x96\xd4\xa8\xc5\xea\x40\x03\xf8\x97\xd0\xca\x6e\xc2\xaa\x00\x28\x53\x6a\xf5\xc3\x0e\xd9\x11\x66\xb5\xa3\xc5\xac\x31\x35\x91\x8f\x03\x3c\x0f\x56\xba\x52\x66\xba\xe2\x8e\x5d\xe9\xc3\x0e\x68\xee\xf8\x5e\x1b\xd3\xc5\xa9\x3b\xa8\xa3\xd5\x2b\xda\x9e\x52\x1b\xd4\xc0\x2c\x97\xdf\x89\xab\xb6\x06\x4f\x5c\x55\x95\x3c\x86\x00\x82\x43\xf0\x64\x0c\x80\xf1\xdc\x0b\x5d\x70\xc7\xb5\xdc\x3f\x1d\xd9\x00\xd0\x16\x75\x4e\xc3\xc1\xf5\xce\xaa\x69\xd4\x7f\x34\x14\x67\x07\xa5\xfe\x5e\xbf\xee\x07\xed\x68\x85\xdd\x27\x9d\x7f\x1b\x75\x6c\x1e\x60\x8b\xba\xf8\x0d\xeb\x08\x53\xc0\x1f\x43\x89\x96\x71\xf9\x0d\xed\x82\x72\x83\xac\x0f\x27\x75\x89\x8b\x27\x9b\xa7\x9c\x20\xce\x24\xdb\xb7\xca\xd4\xb6\x48\x0e\x04\xbc\x7c\xd2\x22\xb9\xaa\xa1\xb3\x20\x8e\xa4\xb3\x92\xc0\xad\x82\x30\x89\x2a\xe2\xa8\x41\x0f\xb2\x3d\xf2\x83\x91\x4c\x34\x4e\x84\x34\x6e\x95\x4c\xf3\x9c\xea\x8e\x03\xa4\xd6\x28\x6e\xf5\x9d\x4e\x76\x50\xba\xd3\x30\x87\xba\xcf\x96\xc6\x3f\xb2\x2d\xba\x11\x1b\x37\x8f\x92\x6e\xa5\xbb\xa5\x9d\x33\xdd\x88\x18\xa6\xbb\x4d\xa5\x5b\xc4\xcd\x44\xb5\xa2\xa4\xbc\x02\x2d\x86\x70\x76\x57\xdc\x83\x33\x0a\x47\xf2\xba\x75\x0f\x56\xa4\xcf\x7b\xf0\xcf\xde\xef\x51\xaf\x38\x9d\x7b\xc8\x96\xb6\x10\xd7\x1d\xe6\x32\x33\xf0\xeb\x75\xe1\x3f\xb3\xee\x9f\xb6\xc0\xc6\x34\x92\xbb\x03\xe5\x18\xbd\x07\xfb\x7c\x83\x77\x4c\x10\xe4\xdf\x87\xd2\xe0\x33\xc5\x6b\x21\x94\x9f\x59\x48\x30\xee\x46\x0e\xae\x5f\xf6\x4e\xca\x69\xec\x05\xe2\xc6\x93\xe1\xa7\x75\xb6\xb0\x84\x88\xe1\xa0\x94\x86\x87\xee\x98\x9d\x34\xd5\x4c\x8a\x58\xd4\xb4\x60\xa2\xa8\xe1\x8a\x41\xa4\x93\xb2\x57\x3f\x65\xbe\x1c\x38\x3b\xfd\xb4\xc1\x90\x61\xd5\x0e\x7a\xcf\xd1\xdd\xa5\x9e\xec\x81\x23\x35\xd2\x82\xb3\xd4\x82\xce\x85\x7f\x85\x56\xd2\xe2\x75\x2b\x08\xe9\x43\xf1\xc8\x00\xb8\x21\xd2\x83\xa3\x5b\x3e\x4a\x5a\xcf\x5e\x8f\xba\x23\x4d\xfd\xa3\xdb\x22\xad\x57\x45\x34\xbc\xec\x2d\x08\x47\x6d\xd8\x26\x3e\x91\x22\x01\x7e\x1b\x20\x7c\x2a\xb9\x18\xd7\x00\x6c\x25\xf5\x57\xf8\xe6\xa0\xea\xdb\x09\x42\x5d\x3d\x25\xd9\x2b\x70\x41\x54\xe0\x22\x19\x63\x91\x57\x3b\x2c\x08\x67\xfa\x7e\x60\x1b\xae\x7e\x5a\xc2\xbf\x56\xe1\x01\x93\x9b\xd4\x86\xf8\x3b\x50\xe7\xa6\x48\xbf\x11\x82\x3a\x77\x5c\xfb\x78\xea\x28\xf2\x86\xce\xe3\xa8\x7b\x8d\x08\xd1\x79\x9e\xc8\x7d\x3a\x07\x93\x21\x7d\x01\x3a\x10\xe3\x1b\xb7\x46\xc6\x3d\x2b\xf9\xa6\x00\x9f\xc0\x68\xf9\x0d\x34\x07\x9c\x05\x58\xe3\xeb\xcb\x64\x85\xeb\x08\x44\x23\x5f\x0e\xef\xd9\x5a\xc1\x34\x51\xbd\xcc\x3d\x60\x7f\xeb\x97\xbd\x05\xcc\x39\x07\xf9\xa3\xcb\xde\x92\xe6\x1c\x33\xf2\x60\x39\x82\x7f\x0c\x34\xc8\x24\xd8\xab\x5e\xf4\x88\x55\xa9\xa3\x0f\xbf\x7c\xf4\xf5\x0e\xb5\x62\x84\x15\x76\xd5\xf7\x5a\x31\x9a\x78\x17\x99\xf4\xbe\x79\x83\x82\x15\x4f\x40\x2b\x43\xe6\xf9\x52\xf9\x61\xbc\xe1\xad\x0c\x74\x9b\x4a\x26\x27\xfb\xb5\x35\x11\xfc\x7d\xc8\xc4\x2b\x5e\x90\x92\x0d\x9c\x33\x10\x7a\xb6\x45\x36\xfc\x9c\xed\xa9\x3b\xd3\xec\x99\x07\x4d\x14\x52\x9b\x3d\x4a\xdb\xec\x7e\x9f\x67\xf7\xc2\x15\xe4\xcd\x56\x1b\x50\xc8\x77\x3f\x95\x33\xe0\x98\xed\x25\x18\xb9\xe8\xde\x1f\x8f\xc6\xa9\x98\x6b\x6a\xfc\xff\xf0\x4d\x6d\x32\x7d\xd3\x40\xae\x22\x7f\x66\x7d\xa5\x29\x3d\xb8\x33\x00\x48\x75\xbd\xe8\xe1\xe6\x0f\xcc\xc7\x0f\xe5\xc1\xbd\x7d\x70\x1c\x4f\xbc\x18\x1f\xf7\xbc\x47\x3c\xc0\x8b\xcd\xf3\xc6\xcc\xe3\x31\xf3\x20\x1c\x9e\x08\x07\xd0\x6b\xe2\x63\xfc\x8d\x8b\x90\x1a\xbc\xad\xe0\xda\x83\xdf\x66\xdf\xaf\xab\x77\x08\x77\xf9\x53\xea\x5e\x28\x4a\xee\x53\xea\x05\x78\x7f\x90\x0c\x78\xad\xc5\x7f\x97\x58\x98\x5c\x0e\x3f\x3f\xa9\x03\xd3\x53\x33\x7c\xfc\xa0\x58\xf7\x93\x9e\xaa\x85\x9e\x6a\x01\x58\x4d\x35\x3f\xf9\x47\xb0\x75\xc1\xc9\x3e\x32\x5a\xa6\xc7\x93\xd4\xf3\x3e\xae\x17\xf2\xfb\x92\x89\xb9\x16\x1e\x92\x00\x76\xd4\x40\xa4\xc2\xf5\xb7\xac\xc1\xf6\xcb\xf4\x5f\x1e\x42\xff\x0b\x00\x00\xff\xff\xf6\x3a\x40\x52\x25\x0e\x00\x00")

func dataStopwordsEnTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataStopwordsEnTxt,
		"data/stopwords-en.txt",
	)
}

func dataStopwordsEnTxt() (*asset, error) {
	bytes, err := dataStopwordsEnTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/stopwords-en.txt", size: 3621, mode: os.FileMode(420), modTime: time.Unix(1543521299, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x97, 0x65, 0xf5, 0x7a, 0x65, 0x9b, 0x83, 0xbf, 0x5d, 0xa6, 0x42, 0xc3, 0xde, 0xff, 0x8b, 0x35, 0xcd, 0x22, 0x15, 0x5b, 0x69, 0xa8, 0x10, 0x97, 0xc3, 0xf0, 0xcc, 0x7c, 0x8d, 0x54, 0x65, 0x94}}
	return a, nil
}

var _dataStopwordsFrTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x57\x31\x96\xe4\x2a\xcf\xcd\xb5\x91\x17\xf5\xa2\x28\x5b\xee\xd2\x1c\x0c\xb4\x04\x3e\xd5\xbd\x9a\x97\xfd\x53\x13\x4f\xf6\x42\x6f\xec\x3f\x57\xc2\xd5\xfd\x25\xf7\x5e\x04\x06\x01\x42\xe0\x74\xab\xba\x52\xba\x59\xcd\x63\xe7\xd2\x29\x6d\x52\x28\x89\x4b\x61\xa3\x24\x39\xf3\x50\x88\x62\x42\x29\xe7\x59\x99\x73\x75\x28\x06\x3a\xff\x52\xca\x15\xcd\x4a\x67\x15\x1e\xfa\xad\xf8\x87\x34\x4a\x6d\xe2\xf9\xdb\x28\x99\xf1\x17\xa5\xde\xb9\xac\x83\xd2\x58\x46\x09\xe4\x20\xa3\x34\x7e\xd5\x01\x17\x83\xff\xb9\x0f\xa1\x34\xa2\x8f\xf1\x31\x38\x53\x1a\x9a\x1c\x24\xd0\xbd\x83\xb0\xa0\x28\x79\x01\x63\x0d\x95\x49\xee\xfa\xd0\x17\xa1\xa1\x61\x8e\xa3\xc3\x67\xe0\x56\xbd\x97\xae\x1c\x8b\x03\x15\x06\x77\xe3\x01\x07\xb2\x5b\x5c\x1a\xa5\x63\x3a\x70\xf8\xf8\x87\x0f\x7f\x24\xb7\xf0\x02\xf8\xa2\x74\x48\xa0\x8f\x7c\x54\x51\x20\xf4\xa7\x37\xfc\x44\xed\x27\x0c\xb7\x64\xcc\x74\xe3\x34\x1c\x96\x3a\x1a\xdd\x84\x0b\xdd\xe4\x5d\x99\x6e\x75\xec\x74\xd3\x74\x54\xba\xa9\x2a\x2d\xbc\x08\x2d\x9c\x13\x20\x73\xe0\x5b\xd8\x32\xbf\xe5\xf3\xdf\x50\x36\xe9\x55\x65\x57\xdd\x90\xc0\x59\x33\xe4\xaa\x70\x2c\x9d\x16\x6e\x5c\xd6\xe4\x4a\x7b\x92\x72\x31\xbf\x84\x5d\x2a\x84\x97\x7b\x47\xfd\x78\x38\x44\xe7\xe3\x11\x7d\xdf\x13\x36\x3d\x88\xc1\x1f\x03\xc4\xea\x60\xc0\x2f\x5a\xee\xb2\xdc\x61\x1e\x9d\x96\xfb\xf9\x5b\x79\x92\xd1\x22\xe5\xc3\x61\xa4\x32\x1d\x99\x85\x6f\x25\xe7\xef\x7d\x96\xa6\xcc\x69\xa1\x25\xcb\x42\x4b\xdd\x7d\x45\x97\xba\xc3\x0e\xc4\xe4\xea\xde\x92\xa6\x5b\xe6\x1f\xd2\x5c\xab\x80\xcb\xc2\x5a\x7c\x19\x6a\x41\xb4\x2c\x75\xa0\x33\x4d\x0b\xad\xa9\x18\xad\x7c\xab\xa3\xd3\xca\xb3\x74\xc7\xd9\x58\xf9\x57\xa2\xd5\x17\x73\xe5\x36\x04\x16\x2d\xc2\x7a\x31\x43\xe8\xb7\xf0\x89\xae\x6c\x55\xf7\xe4\xad\xed\x0a\xb8\x29\x5d\x58\x1d\xc1\x4e\xe3\xe1\x10\xf3\x7c\x29\x9f\xd5\xca\x1e\x89\x2b\x1f\xec\xde\x1c\x9a\x02\xa5\xd3\x2a\xdb\xc6\xea\xad\x2e\x85\x61\x2e\x1d\xf2\x7c\xbe\x5a\x84\xe4\x9f\xfa\x67\x1b\x68\xf8\x2e\xca\x4b\x7f\x71\x78\x21\x6e\xf0\x26\xe1\x88\x13\x5f\x0c\xc3\xe3\xed\x3e\xdc\xa9\xc7\x5b\xe1\xb1\xb9\x30\x6e\x6e\x99\x33\xab\xa8\xaf\x72\x78\x97\xb5\x2c\x00\xa8\xf1\xc5\x8e\xb3\x99\x4a\x79\xa7\x55\xab\x0f\x1a\x09\x63\x1d\xea\xcb\x70\x3e\x6f\xc3\xe9\x5a\x5f\xde\x36\xee\xc4\xef\x29\x73\xa0\xfb\xeb\xca\xc8\x4f\x94\x9f\xa3\xfd\xfc\xb3\x87\x0c\xab\x85\xc5\x88\xcb\x52\x95\x89\x0b\x72\x28\x7b\x5c\x70\xf1\x29\x72\x39\x44\x6b\x21\x36\x4b\x42\xdc\x31\x3e\x7b\xfd\xc0\x77\xc3\x97\x95\x87\x19\x07\x5e\x25\x73\x42\xba\x70\x46\x4e\xc0\xc1\xb9\xc6\x7b\xa4\x6b\x51\xf9\xb1\x70\xeb\xe7\x93\xf8\xd1\xb9\x58\x75\x8e\x3c\xcc\xe7\x7f\xde\xf8\xfc\x0f\x5b\xb4\x61\xa2\x80\xc8\x53\xae\x82\x03\xbc\xc9\xf9\x7f\xb5\xd0\xc6\x9e\x13\x37\x1c\x95\x2d\xd7\x85\x3c\x19\x6e\x6e\xab\xba\x30\x6d\xe1\xf6\xe6\x6e\x6f\xd3\xed\x2d\xdc\xde\xa6\xdb\xdb\xe5\xf6\x16\x5e\x6c\xe1\xc5\x3b\x17\xa3\x7b\x1a\x9d\xee\x2c\x85\xee\x15\x67\xe2\x5e\x75\x17\x23\x3f\x2a\x77\xa4\x3a\x8f\x01\x40\xec\xe5\x7d\xa8\xa6\x3b\xdd\xcf\x67\x4e\x46\xb2\xb7\xaa\x9d\xe9\xd7\xb0\x8f\x11\xe8\x85\xce\x94\x93\x98\xb1\x52\x4e\x71\x5c\x28\xb3\x6f\x7c\xfe\x3e\x3f\xf9\x3a\x3f\xb8\xdc\x28\x6e\xb8\x5c\xcb\x7b\xe7\xbd\x41\x69\x00\xfa\x44\x16\xc4\x01\x0a\xe1\x7b\xbf\x27\x29\x3d\x90\x3d\x0b\x78\xf8\xec\x29\x23\x2b\x3b\x9d\x4f\xda\xd3\x43\x76\x84\x92\x7f\x0c\x30\xda\x59\x17\xa1\x1d\x09\x07\x50\x78\x92\x39\x03\xe1\xee\x2e\x65\x71\x74\x98\x9d\xd4\xe9\x85\x8b\xf0\xa2\x4a\x59\x91\x02\x21\x80\x9f\x5c\xc2\x9b\x91\xbb\x34\x7c\x34\x85\xd1\xfc\x22\xe2\xa6\xa4\x3e\x94\xf3\xc5\x99\xbf\x95\x51\xe1\x54\xa2\xc3\xc2\x8b\xc7\xab\xf2\x0f\xe9\xd1\xe6\x67\xb2\xf0\x38\x62\x63\x4a\xdd\x6f\xca\x03\xfb\x3e\xe5\x03\x62\x3f\x9f\x30\xf4\x14\x39\xb5\x54\x04\x7c\x41\xb2\x02\x5c\x41\x5c\xea\x38\x70\xc1\x4d\x7e\x50\x39\x9f\x2f\x0f\xce\xbf\xfe\x8d\x93\x51\xcd\xf9\x7c\x52\x2d\x5f\x0c\x88\xb1\xab\x57\x0c\x49\x40\xeb\x0e\x4c\xd5\xaf\x70\xf4\xa8\x7d\xd2\x55\x34\x6a\x09\xd1\xdb\x92\x7a\x40\xb7\xa4\x99\x03\x4b\x0f\x56\xd0\x2e\xc0\x1a\x75\x86\x95\x6f\x49\xfd\xe0\x82\x65\x19\x59\xa2\x61\x68\x4f\xd5\xff\x53\xda\xa3\x3f\xb3\xf3\x49\xd7\xa5\xd9\xb8\x18\x53\x63\xdd\x19\x05\xb5\x8a\x18\xb8\x84\x51\xe3\x01\xfb\xf0\xac\xd6\xb0\x8e\x6d\xdb\x3a\xb5\x0d\x66\x6c\x44\x93\xf3\x37\x9c\xcf\x38\x36\x2d\xd7\xb1\x51\xcb\x03\xe3\x82\xcd\x41\x3c\x9a\x5b\x1e\xfd\xfc\xdb\xa9\x55\x1c\x48\x93\xed\x5b\x99\x4b\xc1\xed\x76\x09\x98\x46\xba\x03\xd5\xe1\x63\x54\x71\xe1\x0f\xa9\x29\xd0\xdb\xf0\x37\x4d\x53\x4e\xd9\xef\xc7\xa6\xbc\x88\xcd\xd9\x2a\xef\xbe\x2a\xe0\x58\x91\x4b\x5d\xf5\x46\x4d\xeb\x6d\x7e\x59\x6f\x7e\x4d\x37\xad\x0b\xc7\xfa\x68\xc5\x3d\x1f\x8f\xc3\x66\xd2\x3b\xf9\x3d\x09\xc0\x59\x6c\x78\x4d\xe2\x4a\x5f\x1d\x7b\xe0\xdb\xf9\xef\x9b\x55\x89\x42\x02\xa9\xf7\xfb\x31\x52\xaf\xfa\x15\x42\x2f\x7a\x3b\xa4\xbc\xf7\x28\x44\x0c\x7d\x4b\xf7\xd2\x73\x05\x60\xa9\x05\x83\xce\x24\x72\xa5\x0e\xf0\xc7\xf8\x67\x94\xa9\xf8\xe2\xa8\x02\xca\xeb\x4b\x29\x3e\xbc\x3b\x57\x05\x36\x4d\x1a\xe0\x63\x41\x18\x29\xe7\xd4\xe5\xe0\x97\x88\x3a\xde\x93\x7e\x0c\x5f\x2b\xe5\xb2\x3a\xe0\x63\x36\x8f\x43\x70\x94\x78\x96\x54\x96\x2e\x1b\x29\x77\x6c\xa3\xf2\x51\x65\x91\x60\x24\x58\x45\xde\xb1\xb4\x28\xdf\x32\x0f\x32\x6c\xa4\xe1\x7d\x62\x09\xcf\x9a\x2e\x64\x69\x6c\x64\x88\x2d\x63\xf9\x62\x32\xce\x15\x7a\xbf\xc5\x66\x87\xf2\x9b\xc3\xe5\xb4\x44\xd9\xa1\x05\xc4\xc2\x1a\x6b\x72\x90\xc0\x68\xe2\x11\xe5\x14\x25\x2f\xf0\x17\x50\x26\xe1\xc6\x30\xd6\x17\xa1\xe1\xc8\x0e\x1c\xe8\x2b\x64\x3e\xa1\x48\xa4\x36\x13\xa9\x79\x22\x35\x29\x70\xfc\x7a\x2d\xd8\x2b\x69\x5a\x0d\x2f\x70\xf4\x0d\x6f\x08\xab\xf2\xf0\x68\x31\xbc\xfd\x60\xf4\xea\x01\x15\xe7\xd0\x2a\x5e\xe4\x56\xfd\x49\x6e\x8d\x17\xd9\x7c\x27\xbf\x65\x98\x07\xf6\x6e\x23\xeb\xb5\x51\xec\xc5\xf4\x72\xdc\xba\x20\x72\x6c\x6c\x5b\x5c\xb7\x2f\xc5\x21\x61\x81\x43\x23\xd4\x11\x6d\x9c\xf9\x25\xec\x52\x21\x14\x35\xbf\x18\x0d\x1b\x6b\xab\x86\xb2\x76\x3c\x3b\x7b\x2a\xab\x18\x79\x94\xf4\xa4\x78\x58\x51\xf7\x20\x76\x74\xaf\x7a\x44\x73\x47\xc4\xce\x5b\x0c\x7f\x61\x00\x51\x60\x67\xea\x58\xdf\x1e\xeb\xdb\xe7\xfa\x76\x5f\xdf\xfe\x5a\xd0\x5e\xc7\x72\xf7\xaf\xab\xff\xa2\xa1\x6e\x38\xb8\xa9\x73\xa0\xe7\x5a\x57\x46\x5d\x3d\xb8\x7a\xbc\x20\x3d\xb5\x77\xf5\x7a\x60\xec\xd8\xb7\x0c\x6f\xb5\x36\xea\x9e\x16\xba\x55\x29\xc0\x21\x85\x06\x5c\x1a\x45\xb6\xaa\xb3\xe5\x28\xbe\x39\x41\x46\xfe\x1f\x76\x24\xbf\xe6\xfd\x29\x76\x20\xff\x45\x0a\x38\xe4\x48\x8e\xec\x60\x74\xe4\x54\x28\x0e\xcd\x51\x85\x1d\x4a\xa7\x79\x7c\x0e\xb8\x78\x20\x66\x8e\xea\x56\xe4\x94\x03\x93\x3d\x7e\xdc\x67\x47\xdc\x59\xc7\xbc\xb3\x0e\x3c\x3c\x3f\x53\x29\x74\x3e\x7b\x9c\x00\x17\x16\x14\xa5\x69\x74\xc4\x11\x00\x21\xd8\xce\x67\x3f\x9f\x3c\x69\x16\x8d\xce\x3f\x58\xc4\xf3\x0f\x86\xf9\xff\x00\x00\x00\xff\xff\x18\x03\x0b\x77\xc0\x0f\x00\x00")

func dataStopwordsFrTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataStopwordsFrTxt,
		"data/stopwords-fr.txt",
	)
}

func dataStopwordsFrTxt() (*asset, error) {
	bytes, err := dataStopwordsFrTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/stopwords-fr.txt", size: 4032, mode: os.FileMode(420), modTime: time.Unix(1543524948, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfa, 0x46, 0x7c, 0x5a, 0xf, 0x73, 0x4f, 0xf1, 0xde, 0x28, 0xef, 0x68, 0xd0, 0x5b, 0xc5, 0x72, 0x30, 0x80, 0x69, 0x42, 0x5c, 0x2e, 0xec, 0x8c, 0xad, 0x6b, 0x89, 0xb2, 0x39, 0x4c, 0xfa, 0xa4}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/stopwords-en.txt": dataStopwordsEnTxt,

	"data/stopwords-fr.txt": dataStopwordsFrTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"stopwords-en.txt": &bintree{dataStopwordsEnTxt, map[string]*bintree{}},
		"stopwords-fr.txt": &bintree{dataStopwordsFrTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
