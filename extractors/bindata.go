// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/stopwords-en.txt (3.652kB)
// data/stopwords-fr.txt (4.05kB)

package extractors

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataStopwordsEnTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x57\x5d\xba\xe5\xa0\xaa\x7c\x67\x22\xfd\x74\x07\x65\x22\x89\xde\x65\x24\x47\x70\xa5\x3d\xa3\x3f\x5f\x41\x76\x77\x3f\xec\xaa\x5a\x06\xff\x10\xc1\x9d\xb6\xc6\x94\x36\x99\x06\xfc\x42\xab\x51\xda\x77\x19\x39\xf5\x9d\x5f\x59\xfb\xf9\x57\xb5\x45\x69\x1f\xa2\x4a\x69\xb7\x99\x1a\x7e\xe7\xcc\x99\xd2\x71\xf0\x6e\x7f\x84\x77\x72\xa5\x94\x0e\xe3\x11\xf8\xa4\x91\x95\xd2\x99\x6a\x0f\xc4\x84\xed\x12\x27\xe9\xec\x78\x52\x6a\x83\x53\x5e\x94\x9a\x0a\xa5\x66\x45\xe6\x59\x28\xb5\x27\x2d\xa5\x74\xb9\x09\x10\xdd\x7a\x97\xe9\x8b\xed\x62\x05\xf3\xf4\xb5\x09\xfa\xf6\x55\xe4\x01\x5d\x32\xf0\x79\xf9\xf8\x7d\x59\xf1\xc5\xf5\xf5\xa4\xf5\x92\x3a\x17\x86\xdd\x7d\xa7\xc1\xdd\xb0\xb1\xfb\x1e\xf2\xbb\x5e\xc9\x18\xbf\x06\x77\x07\xa3\x34\xaa\x32\xa5\x21\xb3\x67\x4a\x5a\x33\x53\xd2\x8f\x8f\x3a\xad\x50\xfa\xa6\xda\xc2\xb9\x3e\xc5\x73\x4c\xf8\x69\x4b\xfb\x87\x36\xde\xd3\xc5\x4e\x53\x9d\xe5\xfa\x21\x0d\xc6\x38\x1b\x73\xa7\x8d\x0f\xac\x3c\xa8\xa4\x9e\x69\xe3\xb3\xf6\xc0\x1e\x66\xaf\xd2\x90\xa0\x52\xdd\x30\x3e\xb7\xca\x5f\x8c\xd0\xe4\xa1\x8d\x7d\xa5\x41\xb0\xb4\x27\x66\x59\x82\x1e\x55\x1a\x6d\x62\x85\xb6\x51\xf9\x08\x6c\x8b\x7c\xb9\x3b\xbc\x6c\xa0\x5f\x40\xac\xdc\x51\x69\xe7\x61\x38\xcc\x97\xd1\x01\x1b\x8a\xed\xec\xd2\xe3\x63\x30\x96\xf4\x4a\x7c\x9b\x2d\x07\x76\xa3\x9c\x8c\x29\xd7\x8c\xf1\x73\x3d\x0e\x76\x3f\x67\x61\x75\xf0\x66\x41\xff\x8c\x43\xcc\x12\x0d\x4f\x77\x88\xa0\xca\x73\xc0\x80\xd3\x5e\x88\x3d\xf2\x88\xeb\x59\x5e\x5c\xc4\xd5\xc3\x83\x9b\xb2\x43\x1c\x37\x77\x8f\x6f\xee\x1e\x61\xac\x37\xef\xd5\xa3\x9a\xed\xff\x52\x23\xfe\x72\x07\x0c\x87\x15\xe8\xe1\xe5\x0a\x8b\x71\x11\x31\xe5\xf2\x1d\xf7\xf7\xce\xb7\xd1\x51\x0f\x2b\x74\xd4\xa1\xd0\x5f\xa6\x43\x5a\x93\x87\xf3\x2b\xd0\x2b\x94\xd2\x21\xe3\xe2\xf1\x52\x5b\x10\xe8\xeb\x41\x76\xc8\x1c\x74\x0c\xb9\xe8\x98\xc3\xf7\xf1\xb2\xc7\xf6\x99\xbe\x4c\x27\x9b\x02\xfc\xea\x9d\x98\x0b\xd0\x1d\x15\xe8\xed\xf0\xe8\x89\x65\x9f\x62\xc6\x9d\x4a\xba\x6f\xee\x4a\x25\x8d\xdc\x16\x95\xe4\xbe\x2e\x18\x10\xf0\xfe\x40\xd7\xc2\xb8\x65\xbe\x39\x40\x5c\x6a\xa8\x6d\x39\xd5\xee\xa4\x8e\xf3\x16\xff\xe9\xbf\x94\xdb\x41\xa5\x5e\x2f\xfb\xf2\x0b\xa2\xa4\xc8\xb3\x71\x35\xb0\xfb\xb8\xcc\x9e\x07\x67\xaa\xbf\x5a\xa3\x7a\x5d\x9c\x2b\xe2\xe2\x8f\x6a\x8b\xea\x75\xcb\x30\xcf\x4e\x3f\xd2\xa8\xf6\xcc\xe8\xd6\x33\xff\xa6\xda\xe1\xc1\x64\x55\x3a\x21\xbf\x70\xc2\x17\x13\xaa\xfd\xcb\xfd\x6d\x46\xc8\x50\xf5\xbd\x56\xf3\xd9\xcc\x57\x57\x7f\x7d\x99\xfe\x7f\xaa\xd1\x87\xf9\x76\x50\xfa\xe0\x24\x3f\x5d\x1e\x87\xee\xa8\xd4\xd2\x38\xb1\xa2\x96\xd4\xa8\xc5\xea\x40\x03\xf8\x97\xd0\xca\x6e\xc2\xaa\x00\x28\x53\x6a\xf5\xc3\x0e\xd9\x11\x66\xb5\xa3\xc5\xac\x31\x35\x91\x8f\x03\x3c\x0f\x56\xba\x52\x66\xba\x52\x6d\x26\x20\x5c\xb5\x2b\x7d\xd8\x01\x5f\x3b\x7e\xaf\x8d\xe9\xe2\xd4\x1d\xd4\xd1\xea\x15\x6d\x4f\xa9\x0d\x6a\x60\xb2\xcb\xaf\xc6\x55\x5b\x83\x43\xae\xaa\x4a\x1e\x4a\x00\xc1\x59\x78\x4e\x06\xc0\x78\xee\x85\x2e\x78\xe5\x5a\xee\xa6\x8e\xa4\x00\x68\x8b\x3a\xa7\xe1\xe0\x7a\x67\xd5\x34\xea\x3f\x1a\x8a\xb3\x83\x52\x7f\x6f\x61\xf7\xf3\x76\xb4\xc2\xee\x9a\xce\xbf\x8d\x3a\x7c\x00\xb0\x45\x5d\xfc\xa2\x75\x44\x2b\xe0\x8f\xa1\x44\xcb\xb8\xfc\xa2\x76\x41\xd5\x41\xf2\x87\xaf\xba\xc4\xfd\x93\xcd\x33\x4f\x10\x67\x92\xed\x5b\x65\x6a\x5b\x24\x07\xe2\x5e\x3e\x69\x91\x5c\xd5\xd0\x59\x10\x4e\xd2\x59\x49\xe0\x56\x41\xb4\x44\x31\x71\xd4\xa0\x07\x49\x1f\x69\xc2\x48\x26\x1a\x27\x22\x1b\x97\x4b\xa6\x79\x6a\x75\xc7\x01\x52\x6b\x14\x97\xfb\x4e\x27\x3b\x28\xdd\x69\x98\x43\xdd\x67\x4b\xe3\x1f\xd9\x16\xdd\x08\x91\x9b\x47\x49\xb7\xd2\xdd\xd2\xce\x99\x6e\x04\x0e\xd3\xdd\xa6\xd2\x2d\xe2\x66\xa2\x5a\x51\x59\x5e\x81\x16\x43\x54\xbb\x2b\xee\xc1\x19\xf5\x23\x79\xf9\xba\x07\x2b\xb2\xe8\x3d\xf8\x67\xef\xf7\xa8\x57\x9c\xce\x3d\x64\x4b\x5b\x88\xeb\x0e\x73\x99\x19\xf8\xf5\xf2\xf0\x9f\x59\xf7\x4f\x5b\x60\x63\x1a\xc9\xdd\x81\xaa\x8c\xde\x83\x7d\xbe\xc1\x3b\x26\x08\xf2\xdf\x87\xd2\xe0\x33\xc5\xa3\x21\x94\x9f\x59\x48\x30\xae\x48\x0e\xae\x5f\xf6\x4e\xca\x69\xec\x05\xe2\xc6\xcb\xe1\xa7\x75\xb6\xb0\x84\x88\xe1\xa0\x94\x86\x87\xee\x98\x9d\x34\xd5\x4c\x8a\x58\xd4\xb4\x60\xa2\x28\xe5\x8a\x41\xa4\x93\xb2\x17\x41\x65\xbe\x1c\x38\x3b\xfd\xb4\xc1\x90\x61\xd5\x0e\x7a\xcf\xd1\xdd\xa5\x9e\xf3\x81\x23\x35\xd2\x82\xb3\xd4\x82\xce\x85\x7f\x85\x56\xd2\xe2\xe5\x2b\x08\x59\x44\xf1\xd6\x00\xb8\x21\xb2\x84\xa3\x5b\x3e\x4a\x5a\xcf\x5e\x8f\xba\x23\x5b\xfd\xa3\xdb\x22\xad\x57\x45\x34\xbc\xec\x2d\x08\x47\x6d\xd8\x26\x7e\x22\x53\x02\xfc\x36\x40\xf8\x54\x72\x31\xae\x01\xd8\x4a\xea\xaf\xf0\xcd\x41\xd5\xb7\x13\x84\xba\x7a\x4a\xb2\x57\xe0\x82\xa8\xc0\x45\x32\xc6\x22\x2f\x7a\x58\x10\xce\xf4\xfd\x81\x6d\xb8\xfa\x69\x09\xff\x5a\x85\x07\x4c\x6e\x52\x1b\xe2\xcf\x41\x9d\x9b\x22\x0b\x47\x08\xea\xdc\x71\xed\xe3\xc5\xa3\xc8\x1b\x3a\x8f\xa3\xee\x35\x22\x44\xe7\x79\x22\x05\xea\x1c\x4c\x86\xf4\x05\xe8\x40\x8c\x6f\xdc\x1a\x19\xf7\xac\xe4\x9b\x02\x7c\x02\xa3\xe5\x37\xd0\x1c\x70\x16\x60\x8d\x5f\x5f\x26\x2b\x5c\x47\x20\x1a\xf9\x72\x78\xcf\xd6\x0a\xa6\x89\x22\x66\xee\x01\xfb\x5b\xc6\xec\xad\x63\xce\x39\xc8\xdf\x5e\xf6\x56\x36\xe7\x98\x91\x07\xcb\x11\xfc\x63\xa0\x41\x26\xc1\x5e\xfc\xa2\x47\xac\x4a\x1d\x7d\xf8\xe5\xa3\xaf\x77\xa8\x15\x23\xac\xb0\xab\xbe\xd7\x8a\xd1\xc4\xbb\xc8\xa4\xf7\xe9\x1b\x14\xac\x78\x09\x5a\x19\x32\xcf\x97\xca\x0f\xe3\x29\x6f\x65\xa0\xdb\x54\x32\x39\xd9\xaf\xad\x89\xe0\xef\x43\x26\x5e\xf8\x82\x94\x6c\xe0\x9c\x81\xd0\xb3\x2d\xb2\xe1\xe7\x6c\x4f\xdd\x99\x66\xcf\x3c\x68\xa2\x9e\xda\xec\x51\xe1\x66\xf7\xfb\x3c\xbb\xd7\xaf\x20\x6f\xb6\xda\x80\x42\xbe\xfb\xa9\x9c\x01\xc7\x6c\x2f\xc1\xc8\x45\xf7\xfe\x78\x3b\x4e\xc5\x5c\x53\xe3\xdf\x88\x6f\x6a\x93\xe9\x9b\x06\x72\x15\xf9\x6b\xeb\x2b\x4d\xe9\xc1\x9d\x01\x40\xaa\xeb\x45\x0f\x37\x7f\x67\x3e\x7e\x28\x0f\xee\xed\x83\xe3\x78\xe2\xe1\xf8\xb8\xe7\x3d\xe2\x01\x5e\x6c\x9e\x37\x66\x1e\x8f\x99\x07\xe1\xf0\x44\x38\x80\x5e\x13\x1f\xe3\x6f\x5c\x84\xd4\xe0\x6d\x05\xd7\x1e\xfc\x36\xfb\x7e\x5d\xbd\x43\xb8\xcb\x9f\x52\xf7\x42\x51\x72\x9f\x52\x2f\xc0\xfb\x41\x32\xe0\xb5\x16\xff\x2e\xb1\x30\xb9\x1c\x7e\x3e\xa9\x03\xd3\x53\x33\x7c\xfc\xa0\x58\xf7\x93\x9e\xaa\x85\x9e\x6a\x01\x58\x4d\x35\x3f\xf9\x47\xb0\x75\xc1\xc9\x3e\x32\x5a\xa6\xc7\x93\xd4\xf3\xbe\xb1\x17\xf2\xfb\x92\xf9\x2b\xb0\x35\x50\xe0\xf0\x96\xc1\xae\x03\x35\x10\xd9\x71\xfd\xad\x74\x4b\xe6\xd7\xbf\xc3\xbf\xff\xe5\x21\xff\x0b\x00\x00\xff\xff\x56\xfb\x48\xa0\x44\x0e\x00\x00")

func dataStopwordsEnTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataStopwordsEnTxt,
		"data/stopwords-en.txt",
	)
}

func dataStopwordsEnTxt() (*asset, error) {
	bytes, err := dataStopwordsEnTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/stopwords-en.txt", size: 3652, mode: os.FileMode(420), modTime: time.Unix(1544810982, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4c, 0x15, 0x66, 0x31, 0x1f, 0x9e, 0x58, 0x4a, 0x99, 0x62, 0xaa, 0x7a, 0xb2, 0xbd, 0x4e, 0x7c, 0x1b, 0x23, 0x9, 0x24, 0x7b, 0xa3, 0x36, 0xf7, 0xbf, 0x1b, 0x34, 0x13, 0x4d, 0x80, 0xec, 0x9f}}
	return a, nil
}

var _dataStopwordsFrTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x57\x31\x96\xe4\x2a\xcf\xcd\xb5\x91\x17\xf5\xa2\x28\x2c\x77\x69\x0e\x06\xb7\x04\x3e\xd5\xbd\x9a\x97\xfd\x53\x13\x4f\xf6\x42\x6f\xec\x3f\x57\xc2\xd5\xfd\x25\xf7\x5e\x04\x05\x32\x48\x82\x4a\xb7\xa6\x0b\xa5\x9b\xb5\x32\x36\xae\x9d\xd2\x2a\x95\x92\xb8\x14\x36\x4a\x52\x0a\x0f\x85\xa8\x26\x94\x4a\x99\x9d\xa5\x34\x87\x6a\xa0\xf3\x2f\xa5\xd2\x30\xac\x76\x56\xe1\xa1\xdf\x8a\x7f\x48\xa3\xb4\x4f\x3c\x7f\x1b\x25\x33\xfe\xa2\xd4\x3b\xd7\x65\x50\x1a\x79\xd4\x40\x0e\x32\x4a\xe3\x57\x1b\x70\x31\xf8\x9f\xfb\x10\x4a\x23\xe6\x18\x1f\x83\x0b\xa5\xa1\xc9\x41\x02\xdd\x3b\x08\x0b\x8a\x96\x37\xb0\xd6\x50\x99\xe4\xae\x0f\x7d\x11\x06\x1a\xbe\x71\x74\xf8\x0c\x5c\x9b\xcf\xd2\x95\x63\x73\xa0\xc2\xe0\x6e\x3c\xe0\x40\x71\x8b\x4b\xa3\x74\x4c\x07\x0e\x5f\xff\xf0\xe5\x8f\xe4\x16\xce\x80\x2f\x4a\x87\x04\xfa\xca\x47\x13\x05\x42\x7f\xfa\xc0\x4f\xf4\x7e\xc2\x70\x4b\xc6\x4c\x37\x4e\xc3\x21\xb7\xb1\xd3\x4d\xb8\xd2\x4d\xde\x95\xe9\xd6\xc6\x46\x37\x4d\x47\xa3\x9b\xaa\x52\xe6\x2c\x94\x79\xe1\x07\x65\x2e\x09\x50\x38\xf0\xcd\x7b\x20\xca\xf9\x6f\x28\x9b\xf4\xea\xb2\xab\x6f\x48\xe0\xec\x19\x72\x75\x38\xd6\x4e\x99\x77\xae\x4b\x72\xa5\x3d\x49\xbd\x98\x5f\xc2\x2e\x15\xc2\xdb\xbd\xa3\x7f\x3c\x1c\x62\xf2\xf1\x88\xb9\xef\x09\x47\x1f\xc4\xe0\x8f\x01\x62\x75\x30\xe0\x17\xe5\xbb\xe4\x3b\xcc\xa3\x53\xbe\x9f\xbf\x95\x27\x19\x65\xa9\x1f\x0e\x23\xd5\xe9\xc8\x6c\x7c\x2b\x39\x7f\x6f\xb3\x35\x65\x49\x99\x72\x91\x4c\xb9\x6d\xbe\xaf\xb9\x6d\xb0\x03\xf1\x71\x6d\xdb\x93\xa6\x5b\xe1\x1f\xd2\x5c\xab\x80\x6b\x66\xad\xbe\x0d\xad\x22\x66\x72\x1b\x98\x4c\x53\xa6\x25\x55\xa3\x85\x6f\x6d\x74\x5a\x78\xb6\xee\xc8\x90\x85\x7f\x25\x5a\x7c\x33\x17\xde\x87\xc0\xa2\x55\x58\x2f\x66\x08\xfd\x16\xfe\xa1\x0b\x5b\xd3\x2d\xf9\x68\xbb\xc2\x6e\x4a\x17\xd6\x46\xb0\xd3\x78\x38\xc4\x77\xbe\x94\x7f\xd5\xc2\x1e\x8f\x0b\x1f\xec\xde\x1c\x9a\x02\xa5\xd3\x22\xeb\xca\xea\xa3\x2e\x85\x65\x2e\x1d\xf2\x7c\xbe\x46\x84\xe4\x9f\xfa\xe7\x18\x68\xf8\x2e\xca\xb9\xbf\x38\xbc\x10\x37\xf8\x90\x70\xc4\x89\x2f\x86\xe1\xf1\x76\x1f\xee\xd4\xe3\xad\xf2\x58\x5d\x18\xef\x6e\x99\x5f\xd6\xd0\xdf\xe4\xf0\x29\x5b\xcd\x00\xa8\xf1\xc5\x8e\x73\x98\x4a\x7d\xa7\x45\x9b\x2f\x1a\x65\x63\x19\xea\xdb\x70\x3e\x6f\xc3\xe9\xda\x5f\x5e\x57\xee\xc4\xef\xa9\x70\xa0\xfb\xeb\xca\xc8\x33\xca\xf3\x68\x3b\xff\x6c\x21\xc3\x6a\x61\x31\xe2\x9a\x9b\x32\x71\x45\x25\x65\x8f\x0b\xae\xfe\x89\x5c\x0f\xd1\x56\x89\xcd\x92\x10\x77\xac\xcf\xde\x3f\xf0\xbb\xe1\xdb\xca\xc3\x8c\x03\xaf\x96\x39\xa1\x68\x38\xa3\x32\x20\x71\xae\xf5\x1e\xe9\xda\x54\x7e\x64\xde\xfb\xf9\x24\x7e\x74\xae\xd6\x9c\xa3\x1a\xf3\xf9\x9f\x0f\x3e\xff\xc3\x11\xad\xf8\x50\x40\x54\x2b\x57\xc1\x01\x3e\xe4\xfc\xbf\x56\x69\x65\xaf\x8c\x2b\x52\x65\x2d\x2d\x93\x97\xc4\xd5\x6d\x4d\x33\xd3\x1a\x6e\xaf\xee\xf6\x3a\xdd\x5e\xc3\xed\x75\xba\xbd\x5e\x6e\xaf\xe1\xc5\x1a\x5e\xbc\x73\x35\xba\xa7\xd1\xe9\xce\x52\xe9\xde\x90\x13\xf7\xa6\x9b\x18\x79\xaa\xdc\x51\xf0\x3c\x06\x00\x71\x96\xf7\xa1\x9a\xee\x74\x3f\x9f\x25\x19\xc9\xb6\x37\xed\x4c\xbf\x86\x7d\x8c\x40\x6f\x74\xa6\x92\xc4\x8c\x95\x4a\x8a\x74\xa1\xc2\x7e\xf0\xe5\x3b\x7f\xca\x95\x3f\xb8\xe2\x28\xee\xb9\xd2\xea\x7b\xe7\x6d\x87\xd2\x00\xcc\x89\x2a\x88\x04\x0a\xe1\x67\xbf\x25\x29\xbd\x81\x6a\x0f\x64\x2f\x06\x1e\x45\x5b\x2a\x28\xd1\x4e\xe7\x93\xb6\xf4\x90\x0d\x11\xe5\x73\x00\x8c\x36\xd6\x2c\xb4\xa1\xee\x00\x2a\x4f\x32\x67\x20\xbc\xde\xa4\x66\x47\x87\x39\x49\x9b\xce\xb8\x08\x67\x9a\xd4\x05\x95\x10\x02\xf8\xc9\x35\xbc\x19\xa5\xcb\x8e\x1f\x4d\x61\x34\x7f\x11\xe1\x53\x53\x1f\xca\xe5\xe2\xc2\xdf\xca\xa8\x72\xaa\x31\x61\xe5\xec\x61\xab\xfc\x43\x7a\xd0\x79\x6a\x56\x1e\x47\x9c\x4f\x6d\xdb\x4d\x79\xe0\xf8\xa7\x7c\x40\x6c\xe7\x13\x86\x9e\xa2\xb4\xd6\x86\xb8\xaf\xa8\x59\x80\x2b\x96\x6b\x1b\x07\x6e\xbb\xc9\x0f\xaa\xe7\xf3\xe5\xc1\xf9\xd7\x7f\xe3\x64\xd4\x4a\x39\x9f\xd4\xea\x17\x03\x62\xed\xe6\x1d\x43\x12\xd0\xba\x03\x53\xf3\xfb\x1c\x33\x6a\x9f\x74\x35\x8d\xf6\x84\x20\xde\x93\x7a\x5c\xef\x49\x0b\x07\xd6\x1e\xac\xa0\x4d\x80\x2d\xfa\x0c\x3b\xbf\x27\xf5\xfc\x05\x4b\x1e\x45\x62\x60\x68\xaf\xd8\xff\xd3\xda\x62\x3e\xb3\xf3\x49\xd7\xdd\xb9\x73\x35\xa6\x9d\x75\x63\x34\xd4\x1a\x62\xe0\x12\x46\x3b\x0f\xd8\x87\x17\xb7\x1d\xfb\xb8\xaf\x6b\xa7\x7d\x85\x19\x07\xb1\xcb\xf9\x1b\xce\x17\x64\xcf\x5e\xda\x58\x69\x2f\x03\xeb\x82\xcd\x41\x3c\xa8\xf7\x32\xfa\xf9\xb7\xd3\xde\x90\x97\x26\xeb\xb7\x32\x97\x82\x4b\xee\x12\x30\x8d\x74\x07\xaa\xc3\xc7\x68\xe2\xc2\x5f\x55\x53\x60\xb6\xe1\x0f\x9c\x5d\x39\x15\xbf\x26\x77\xe5\x2c\x36\xbf\x56\x79\xf3\x5d\x01\xc7\x8e\x5c\xea\xea\x37\xda\xb5\xdd\xe6\x2f\xdb\xcd\x6f\xeb\x5d\x5b\xe6\xd8\x1f\x6d\xb8\xee\xe3\xa5\xb8\x9b\xf4\x4e\x7e\x5d\x02\x90\x92\x3b\x9e\x96\xb8\xd9\x17\xc7\x1e\xf8\x76\xfe\xfb\x66\x4d\xa2\x91\x40\xea\xf3\x7e\x8c\xd4\x9b\x7e\x85\xd0\x8b\xde\x0e\xa9\xef\x3d\x1a\x11\x43\xdf\xd2\xbd\xf4\x92\x01\xc8\xad\x62\xd1\x59\x4b\xae\x0a\x02\xfe\x18\xff\x8c\x3a\x15\x5f\x1c\x5d\x40\x79\xfd\x52\xaa\x2f\xef\xce\x35\x81\x4d\x93\x06\xf8\x5a\x10\x46\xca\x25\x75\x39\xf8\x25\xa2\x8f\xb7\xa4\x1f\xc3\xf7\x4a\xb9\x2e\x0e\xf8\x31\x9b\xc7\x21\x38\x5a\x3c\x5b\x2a\xb9\xcb\x4a\xca\x1d\xc7\xa8\x7c\x34\xc9\x12\x8c\x3a\xab\xa8\x3b\x96\xb2\xf2\xad\xf0\x20\xc3\x41\x1a\x9e\x29\x96\xf0\xba\xe9\x42\x96\xc6\x4a\x86\xd8\x32\x96\x2f\x26\xe3\xd2\xa0\xb7\x5b\x1c\x76\x28\xbf\x40\x5c\x4e\x4b\xb4\x1d\xf6\x80\xd8\x58\x63\x4d\x0e\x12\x18\x43\x3c\xa2\x9c\xa2\xe5\x0d\xfe\x02\xca\x24\x5c\x1c\xc6\xfa\x22\x0c\x1c\xc5\x81\x03\x7d\x87\xcc\x3f\x28\x0a\xa9\xcd\x42\x6a\x5e\x48\x4d\x2a\x1c\xbf\x1e\x0d\xf6\x2a\x9a\xd6\xc2\x0b\xa4\xbe\xe1\x29\x61\x4d\x1e\x1e\x2d\x86\x27\x20\x8c\xde\x3d\xa0\x22\x0f\xad\xe1\x79\x6e\xcd\xdf\xe7\xb6\x73\x96\xd5\x4f\xf2\x5b\x86\x79\xe0\xec\x56\xb2\xde\x76\x8a\xb3\x98\x5e\x8e\x5b\x17\x44\x8e\x8d\x75\x8d\x5b\xf7\xa5\x38\x24\x2c\x70\x68\x84\x3a\x62\x8c\x33\xbf\x84\x5d\x2a\x84\xa2\xe7\x17\x63\xe0\xce\xba\x37\x43\x5b\x3b\x5e\x9f\x3d\xd5\x45\x8c\x3c\x4a\x7a\x52\xbc\xaf\xa8\x7b\x10\x3b\xba\x57\x3d\xa2\xb9\x23\x62\xfb\xf9\x2c\x34\xaf\x32\xfc\x2f\x03\x88\x02\x3b\x53\xc7\x26\xf7\xd8\xe4\x3e\x37\xb9\xfb\x26\xf7\xd7\xae\xf6\x36\xf2\xdd\x7f\xdd\xfc\x4f\x1b\xfa\x86\x83\x9b\x3a\x07\x7a\xc1\x75\x65\xd4\xd5\x23\xac\xc7\x6b\xd2\xeb\x7b\x57\xef\x07\xc6\xb1\x7d\xcb\x70\x59\xdb\x4e\xdd\x6b\x43\xb7\x26\x15\x38\xa4\xd2\x80\x4b\xa3\xca\xda\x74\x8e\x1c\xd5\x4f\x28\xc8\xc8\xff\x99\x1d\xc9\xaf\x7c\x7f\x96\x1d\x28\x82\x51\x07\x0e\x39\x92\x23\x3b\x18\x1d\x25\x55\x8a\xcc\x39\x9a\xb0\x43\xed\x34\x73\xe8\x80\x8b\x07\x02\xe7\x68\x6e\x45\x61\x39\xf0\xb1\xc7\x8f\x4b\xed\x88\x8b\xeb\x98\x17\xd7\x81\x47\xe8\x67\xaa\x95\xce\x67\x8f\x34\x70\x61\x41\xd1\x9a\x46\x47\xe4\x01\x08\x11\x77\x3e\xfb\xf9\xe4\x49\xb3\x69\x74\xfe\xc1\x26\x9e\x7f\xb0\xcc\xff\x07\x00\x00\xff\xff\xf8\x9e\xd7\xfc\xd2\x0f\x00\x00")

func dataStopwordsFrTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataStopwordsFrTxt,
		"data/stopwords-fr.txt",
	)
}

func dataStopwordsFrTxt() (*asset, error) {
	bytes, err := dataStopwordsFrTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/stopwords-fr.txt", size: 4050, mode: os.FileMode(420), modTime: time.Unix(1544284796, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc8, 0x3d, 0xcd, 0xfc, 0xee, 0x38, 0x92, 0xb5, 0x1a, 0x64, 0x80, 0xa0, 0x4d, 0x39, 0xf7, 0xd, 0x8, 0x1e, 0x41, 0x83, 0x5b, 0x98, 0xd4, 0xe7, 0x87, 0x39, 0x48, 0x7, 0xe8, 0x85, 0xc2, 0x6c}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/stopwords-en.txt": dataStopwordsEnTxt,

	"data/stopwords-fr.txt": dataStopwordsFrTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"stopwords-en.txt": &bintree{dataStopwordsEnTxt, map[string]*bintree{}},
		"stopwords-fr.txt": &bintree{dataStopwordsFrTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
